{"ast":null,"code":"import _objectSpread from \"/Users/hail/Documents/project/leod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/hail/Documents/project/leod/src/components/Upload/upload.tsx\";\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport UploadList from './uploadList';\nimport Dragger from './dragger';\nexport const Upload = props => {\n  const {\n    defaultFileList,\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    beforeUpload,\n    onChange,\n    onRemove,\n    name,\n    data,\n    headers,\n    withCredentials,\n    accept,\n    multiple,\n    drag,\n    children\n  } = props;\n  const [fileList, setFileList] = useState(defaultFileList || []);\n  const fileRef = useRef(null);\n\n  const updateFileList = (updateFile, updateFileObj) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return _objectSpread(_objectSpread({}, file), updateFileObj);\n        } else {\n          return file;\n        }\n      });\n    });\n  };\n\n  const handleClick = () => {\n    if (fileRef.current) {\n      fileRef.current.click();\n    }\n  };\n\n  const handleRemove = file => {\n    setFileList(prevList => {\n      return prevList.filter(item => item.uid !== file.uid);\n    });\n\n    if (onRemove) {\n      onRemove(file);\n    }\n  };\n\n  const handleFileChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n  };\n\n  let post = file => {\n    const _file = {\n      uid: Date.now + 'upload-file',\n      name: file.name,\n      size: file.size,\n      percentage: 0,\n      raw: file\n    };\n    setFileList([_file, ...fileList]);\n    const formData = new FormData();\n    formData.append(name || 'file', file);\n\n    if (data) {\n      Object.keys(key => {\n        formData.append(key, data[key]);\n      });\n    }\n\n    axios.post(action, formData, {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        'Content-Type': 'multipart/form-data'\n      }),\n      withCredentials,\n      onUploadProgress: e => {\n        let percentage = Math.round(e.loaded * 100 / e.total) || 0;\n        updateFileList(_file, {\n          percentage,\n          status: 'uploading'\n        });\n\n        if (onProgress && percentage < 100) {\n          onProgress(percentage, file);\n        }\n      }\n    }).then(data => {\n      updateFileList(_file, {\n        status: 'success'\n      });\n\n      if (onSuccess) {\n        onSuccess(data, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n\n      console.log(data);\n    }).catch(err => {\n      updateFileList(_file, {\n        status: 'error'\n      });\n\n      if (onError) {\n        onError(err, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n\n      console.log(err);\n    });\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (beforeUpload) {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(resFile => {\n            post(resFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      } else {\n        post(file);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leod-upload-component\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leod-upload-input\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, drag ? /*#__PURE__*/React.createElement(Dragger, {\n    onFile: files => {\n      uploadFiles(files);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, children) : children, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"leod-file-input\",\n    style: {\n      display: 'none'\n    },\n    ref: fileRef,\n    onChange: handleFileChange,\n    type: \"file\",\n    accept: accept,\n    multiple: multiple,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(UploadList, {\n    fileList: fileList,\n    onRemove: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }));\n};\nUpload.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Upload\"\n};\nexport default Upload;\n\ntry {\n  // @ts-ignore\n  Upload.displayName = \"Upload\"; // @ts-ignore\n\n  Upload.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"Upload\",\n    \"props\": {\n      \"defaultFileList\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"defaultFileList\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"UploadFile[]\"\n        }\n      },\n      \"action\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"action\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"onProgress\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onProgress\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(percentage: number, file: File) => void\"\n        }\n      },\n      \"onSuccess\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSuccess\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"onError\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onError\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"beforeUpload\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"beforeUpload\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => boolean | Promise<File>\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => void\"\n        }\n      },\n      \"onRemove\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onRemove\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: UploadFile) => void\"\n        }\n      },\n      \"headers\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"headers\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: string; }\"\n        }\n      },\n      \"data\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"data\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: string; }\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"withCredentials\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"withCredentials\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"accept\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"accept\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"multiple\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"multiple\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"drag\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"drag\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#Upload\"] = {\n      docgenInfo: Upload.__docgenInfo,\n      name: \"Upload\",\n      path: \"src/components/Upload/upload.tsx#Upload\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  upload.displayName = \"upload\"; // @ts-ignore\n\n  upload.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"upload\",\n    \"props\": {\n      \"defaultFileList\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"defaultFileList\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"UploadFile[]\"\n        }\n      },\n      \"action\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"action\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"onProgress\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onProgress\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(percentage: number, file: File) => void\"\n        }\n      },\n      \"onSuccess\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSuccess\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"onError\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onError\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(data: any, file: File) => void\"\n        }\n      },\n      \"beforeUpload\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"beforeUpload\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => boolean | Promise<File>\"\n        }\n      },\n      \"onChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onChange\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: File) => void\"\n        }\n      },\n      \"onRemove\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onRemove\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(file: UploadFile) => void\"\n        }\n      },\n      \"headers\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"headers\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: string; }\"\n        }\n      },\n      \"data\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"data\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"{ [key: string]: string; }\"\n        }\n      },\n      \"name\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"name\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"withCredentials\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"withCredentials\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"accept\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"accept\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"multiple\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"multiple\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      },\n      \"drag\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"drag\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"boolean\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#upload\"] = {\n      docgenInfo: upload.__docgenInfo,\n      name: \"upload\",\n      path: \"src/components/Upload/upload.tsx#upload\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx\"] = {\n    name: \"Upload\",\n    docgenInfo: Upload.__docgenInfo,\n    path: \"src/components/Upload/upload.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/hail/Documents/project/leod/src/components/Upload/upload.tsx"],"names":["Upload","props","children","useState","defaultFileList","fileRef","useRef","updateFileList","setFileList","prevList","file","updateFile","updateFileObj","handleClick","handleRemove","item","onRemove","handleFileChange","e","files","uploadFiles","post","_file","uid","Date","name","size","percentage","raw","formData","Object","key","data","axios","headers","onUploadProgress","Math","status","onProgress","onSuccess","onChange","console","err","onError","postFiles","Array","result","beforeUpload","resFile","display","drag","STORYBOOK_REACT_CLASSES","docgenInfo","path","upload"],"mappings":"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","sourcesContent":["import React, { FC, ChangeEvent, useRef, useState } from 'react'\n\nimport axios from 'axios'\nimport UploadList from './uploadList'\nimport Dragger from './dragger'\n\nexport type UploadFileStatus = 'ready' | 'uploading' | 'success' | 'error'\nexport interface UploadFile {\n  uid: string,\n  size: number,\n  name: string,\n  percentage?: number,\n  status?: UploadFileStatus,\n  raw?: File,\n  response?: any,\n  error?: any\n}\n\nexport interface UploadProps {\n  defaultFileList?: UploadFile[],\n  action: string,\n  onProgress?: (percentage: number, file: File) => void,\n  onSuccess?: (data: any, file: File) => void,\n  onError?: (data: any, file: File) => void,\n  beforeUpload?: (file: File) => boolean | Promise<File>\n  onChange?: (file: File) => void,\n  onRemove?: (file: UploadFile) => void;\n  headers?: { [key: string]: string },\n  data?: { [key: string]: string }\n  name?: string,\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  drag?: boolean;\n}\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    defaultFileList,\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    beforeUpload,\n    onChange,\n    onRemove,\n    name,\n    data,\n    headers,\n    withCredentials,\n    accept,\n    multiple,\n    drag,\n    children\n  } = props\n  const [fileList, setFileList] = useState<UploadFile[]>(defaultFileList || [])\n  const fileRef = useRef<HTMLInputElement>(null)\n  const updateFileList = (updateFile: UploadFile, updateFileObj: Partial<UploadFile>) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return { ...file, ...updateFileObj }\n        } else {\n          return file\n        }\n      })\n\n    })\n  }\n  const handleClick = () => {\n    if (fileRef.current) {\n      fileRef.current.click()\n    }\n  }\n  const handleRemove = (file: UploadFile) => {\n    setFileList((prevList) => {\n      return prevList.filter(item => item.uid !== file.uid)\n    })\n    if (onRemove) {\n      onRemove(file)\n    }\n  }\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if (!files) {\n      return\n    }\n\n    uploadFiles(files)\n\n  }\n  let post = (file: File) => {\n    const _file = {\n      uid: Date.now + 'upload-file', name: file.name, size: file.size, percentage: 0, raw: file\n    }\n    setFileList([_file, ...fileList])\n    const formData = new FormData()\n    formData.append(name || 'file', file)\n    if (data) {\n      Object.keys((key: string) => {\n        formData.append(key, data[key])\n      })\n    }\n    axios.post(action, formData, {\n      headers: {\n        ...headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials,\n      onUploadProgress: (e: ProgressEvent) => {\n        let percentage = Math.round(e.loaded * 100 / e.total) || 0\n        updateFileList(_file, { percentage, status: 'uploading' })\n        if (onProgress && percentage < 100) {\n          onProgress(percentage, file)\n        }\n      }\n    }).then((data: any) => {\n      updateFileList(_file, { status: 'success' })\n      if (onSuccess) {\n        onSuccess(data, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n      console.log(data)\n    }).catch((err: any) => {\n      updateFileList(_file, { status: 'error' })\n      if (onError) {\n        onError(err, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n      console.log(err)\n    })\n  }\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n      if (beforeUpload) {\n        const result = beforeUpload(file)\n        if (result && result instanceof Promise) {\n          result.then((resFile) => {\n            post(resFile)\n          })\n        } else if (result !== false) {\n          post(file)\n        }\n      } else {\n        post(file)\n      }\n    })\n\n  }\n  return <div\n    className=\"leod-upload-component\"\n  >\n    <div className=\"leod-upload-input\"\n      style={{ display: 'inline-block' }}\n      onClick={handleClick}>\n      {drag ?\n        <Dragger onFile={(files) => { uploadFiles(files) }}>\n          {children}\n        </Dragger> :\n        children\n      }\n      <input\n        className=\"leod-file-input\"\n        style={{ display: 'none' }}\n        ref={fileRef}\n        onChange={handleFileChange}\n        type=\"file\"\n        accept={accept}\n        multiple={multiple}\n      />\n    </div>\n\n    <UploadList\n      fileList={fileList}\n      onRemove={handleRemove}\n    />\n  </div>\n}\n\n\nexport default Upload\ntry {\n    // @ts-ignore\n    Upload.displayName = \"Upload\";\n    // @ts-ignore\n    Upload.__docgenInfo = { \"description\": \"\", \"displayName\": \"Upload\", \"props\": { \"defaultFileList\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultFileList\", \"required\": false, \"type\": { \"name\": \"UploadFile[]\" } }, \"action\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"action\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onProgress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onProgress\", \"required\": false, \"type\": { \"name\": \"(percentage: number, file: File) => void\" } }, \"onSuccess\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSuccess\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"onError\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onError\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"beforeUpload\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"beforeUpload\", \"required\": false, \"type\": { \"name\": \"(file: File) => boolean | Promise<File>\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(file: File) => void\" } }, \"onRemove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onRemove\", \"required\": false, \"type\": { \"name\": \"(file: UploadFile) => void\" } }, \"headers\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headers\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"data\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"withCredentials\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"withCredentials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accept\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"accept\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"multiple\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"multiple\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"drag\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"drag\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#Upload\"] = { docgenInfo: Upload.__docgenInfo, name: \"Upload\", path: \"src/components/Upload/upload.tsx#Upload\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    upload.displayName = \"upload\";\n    // @ts-ignore\n    upload.__docgenInfo = { \"description\": \"\", \"displayName\": \"upload\", \"props\": { \"defaultFileList\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"defaultFileList\", \"required\": false, \"type\": { \"name\": \"UploadFile[]\" } }, \"action\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"action\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onProgress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onProgress\", \"required\": false, \"type\": { \"name\": \"(percentage: number, file: File) => void\" } }, \"onSuccess\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSuccess\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"onError\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onError\", \"required\": false, \"type\": { \"name\": \"(data: any, file: File) => void\" } }, \"beforeUpload\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"beforeUpload\", \"required\": false, \"type\": { \"name\": \"(file: File) => boolean | Promise<File>\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(file: File) => void\" } }, \"onRemove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onRemove\", \"required\": false, \"type\": { \"name\": \"(file: UploadFile) => void\" } }, \"headers\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headers\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"data\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"data\", \"required\": false, \"type\": { \"name\": \"{ [key: string]: string; }\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"withCredentials\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"withCredentials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accept\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"accept\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"multiple\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"multiple\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"drag\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"drag\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Upload/upload.tsx#upload\"] = { docgenInfo: upload.__docgenInfo, name: \"upload\", path: \"src/components/Upload/upload.tsx#upload\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}