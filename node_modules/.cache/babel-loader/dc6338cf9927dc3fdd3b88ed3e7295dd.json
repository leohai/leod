{"ast":null,"code":"import _objectWithoutProperties from \"/Users/hail/Documents/project/leod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hail/Documents/project/leod/src/components/AutoComplete/autoComplete.tsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input from '../Input/input';\nimport Icon from '../Icon/icon';\nimport Transition from '../Transition/transition';\nimport useDebounce from '../../hooks/useDebounce';\nimport useClickOutside from '../../hooks/useClickOutside';\nexport const AutoComplete = props => {\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"fetchSuggestions\", \"onSelect\", \"value\", \"renderOption\"]);\n\n  const [inputValue, setInputValue] = useState(value);\n  const [suggestions, setSugestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const triggerSearch = useRef(false);\n  const componentRef = useRef(null);\n  const debouncedValue = useDebounce(inputValue, 300);\n  useClickOutside(componentRef, () => {\n    setSugestions([]);\n  });\n  useEffect(() => {\n    if (debouncedValue && triggerSearch.current) {\n      setSugestions([]);\n      const results = fetchSuggestions(debouncedValue);\n\n      if (results instanceof Promise) {\n        setLoading(true);\n        results.then(data => {\n          setLoading(false);\n          setSugestions(data);\n\n          if (data.length > 0) {\n            setShowDropdown(true);\n          }\n        });\n      } else {\n        setSugestions(results);\n        setShowDropdown(true);\n\n        if (results.length > 0) {\n          setShowDropdown(true);\n        }\n      }\n    } else {\n      setShowDropdown(false);\n    }\n\n    setHighlightIndex(-1);\n  }, [debouncedValue, fetchSuggestions]);\n\n  const highlight = index => {\n    if (index < 0) index = 0;\n\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1;\n    }\n\n    setHighlightIndex(index);\n  };\n\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 13:\n        if (suggestions[highlightIndex]) {\n          handleSelect(suggestions[highlightIndex]);\n        }\n\n        break;\n\n      case 38:\n        highlight(highlightIndex - 1);\n        break;\n\n      case 40:\n        highlight(highlightIndex + 1);\n        break;\n\n      case 27:\n        setShowDropdown(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n    triggerSearch.current = true;\n  };\n\n  const handleSelect = item => {\n    setInputValue(item.value);\n    setShowDropdown(false);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n\n    triggerSearch.current = false;\n  };\n\n  const renderTemplate = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  const generateDropdown = () => {\n    return /*#__PURE__*/React.createElement(Transition, {\n      in: showDropdown || loading,\n      animation: \"zoom-in-top\",\n      timeout: 300,\n      onExited: () => {\n        setSugestions([]);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"leod-suggestion-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, loading && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"suggstions-loading-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: \"spinner\",\n      spin: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    })), suggestions.map((item, index) => {\n      const cnames = classNames('suggestion-item', {\n        'is-active': index === highlightIndex\n      });\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        className: cnames,\n        onClick: () => handleSelect(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }, renderTemplate(item));\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"leod-auto-complete\",\n    ref: componentRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, Object.assign({\n    value: inputValue,\n    onChange: handleChange,\n    onKeyDown: handleKeyDown\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  })), generateDropdown());\n};\nAutoComplete.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AutoComplete\"\n};\nexport default AutoComplete;\n\ntry {\n  // @ts-ignore\n  AutoComplete.displayName = \"AutoComplete\"; // @ts-ignore\n\n  AutoComplete.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"AutoComplete\",\n    \"props\": {\n      \"fetchSuggestions\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"fetchSuggestions\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(str: string) => DataSourceObject[] | Promise<DataSourceObject[]>\"\n        }\n      },\n      \"onSelect\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSelect\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObject) => void\"\n        }\n      },\n      \"renderOption\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"renderOption\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObject) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/AutoComplete/autoComplete.tsx#AutoComplete\"] = {\n      docgenInfo: AutoComplete.__docgenInfo,\n      name: \"AutoComplete\",\n      path: \"src/components/AutoComplete/autoComplete.tsx#AutoComplete\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  autoComplete.displayName = \"autoComplete\"; // @ts-ignore\n\n  autoComplete.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"autoComplete\",\n    \"props\": {\n      \"fetchSuggestions\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"fetchSuggestions\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(str: string) => DataSourceObject[] | Promise<DataSourceObject[]>\"\n        }\n      },\n      \"onSelect\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSelect\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObject) => void\"\n        }\n      },\n      \"renderOption\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"renderOption\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObject) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/AutoComplete/autoComplete.tsx#autoComplete\"] = {\n      docgenInfo: autoComplete.__docgenInfo,\n      name: \"autoComplete\",\n      path: \"src/components/AutoComplete/autoComplete.tsx#autoComplete\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/AutoComplete/autoComplete.tsx\"] = {\n    name: \"AutoComplete\",\n    docgenInfo: AutoComplete.__docgenInfo,\n    path: \"src/components/AutoComplete/autoComplete.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/hail/Documents/project/leod/src/components/AutoComplete/autoComplete.tsx"],"names":["AutoComplete","props","restProps","useState","triggerSearch","useRef","componentRef","debouncedValue","useDebounce","useClickOutside","setSugestions","useEffect","results","fetchSuggestions","setLoading","data","setShowDropdown","setHighlightIndex","highlight","index","suggestions","handleKeyDown","e","handleSelect","highlightIndex","handleChange","value","setInputValue","item","onSelect","renderTemplate","renderOption","generateDropdown","showDropdown","loading","cnames","classNames","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","autoComplete"],"mappings":"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","sourcesContent":["import React, { FC, useState, ChangeEvent, KeyboardEvent, ReactElement, useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport Input, { InputProps } from '../Input/input'\nimport Icon from '../Icon/icon'\nimport Transition from '../Transition/transition'\nimport useDebounce from '../../hooks/useDebounce'\nimport useClickOutside from '../../hooks/useClickOutside'\ninterface DataSourceObject {\n  value: string;\n}\nexport type DataSourceType<T = {}> = T & DataSourceObject\nexport interface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n  fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>;\n  onSelect?: (item: DataSourceType) => void;\n  renderOption?: (item: DataSourceType) => ReactElement;\n}\n\nexport const AutoComplete: FC<AutoCompleteProps> = (props) => {\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props\n\n  const [inputValue, setInputValue] = useState(value as string)\n  const [suggestions, setSugestions] = useState<DataSourceType[]>([])\n  const [loading, setLoading] = useState(false)\n  const [showDropdown, setShowDropdown] = useState(false)\n  const [highlightIndex, setHighlightIndex] = useState(-1)\n  const triggerSearch = useRef(false)\n  const componentRef = useRef<HTMLDivElement>(null)\n  const debouncedValue = useDebounce(inputValue, 300)\n  useClickOutside(componentRef, () => { setSugestions([]) })\n  useEffect(() => {\n    if (debouncedValue && triggerSearch.current) {\n      setSugestions([])\n      const results = fetchSuggestions(debouncedValue)\n      if (results instanceof Promise) {\n        setLoading(true)\n        results.then(data => {\n          setLoading(false)\n          setSugestions(data)\n          if (data.length > 0) {\n            setShowDropdown(true)\n          }\n        })\n      } else {\n        setSugestions(results)\n        setShowDropdown(true)\n        if (results.length > 0) {\n          setShowDropdown(true)\n        }\n      }\n    } else {\n      setShowDropdown(false)\n    }\n    setHighlightIndex(-1)\n  }, [debouncedValue, fetchSuggestions])\n  const highlight = (index: number) => {\n    if (index < 0) index = 0\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1\n    }\n    setHighlightIndex(index)\n  }\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    switch (e.keyCode) {\n      case 13:\n        if (suggestions[highlightIndex]) {\n          handleSelect(suggestions[highlightIndex])\n        }\n        break\n      case 38:\n        highlight(highlightIndex - 1)\n        break\n      case 40:\n        highlight(highlightIndex + 1)\n        break\n      case 27:\n        setShowDropdown(false)\n        break\n      default:\n        break\n    }\n  }\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim()\n    setInputValue(value)\n    triggerSearch.current = true\n  }\n  const handleSelect = (item: DataSourceType) => {\n    setInputValue(item.value)\n    setShowDropdown(false)\n    if (onSelect) {\n      onSelect(item)\n    }\n    triggerSearch.current = false\n  }\n  const renderTemplate = (item: DataSourceType) => {\n    return renderOption ? renderOption(item) : item.value\n  }\n  const generateDropdown = () => {\n    return (\n      <Transition\n        in={showDropdown || loading}\n        animation=\"zoom-in-top\"\n        timeout={300}\n        onExited={() => { setSugestions([]) }}\n      >\n        <ul className=\"leod-suggestion-list\">\n          {loading &&\n            <div className=\"suggstions-loading-icon\">\n              <Icon icon=\"spinner\" spin />\n            </div>\n          }\n          {suggestions.map((item, index) => {\n            const cnames = classNames('suggestion-item', {\n              'is-active': index === highlightIndex\n            })\n            return (\n              <li key={index} className={cnames} onClick={() => handleSelect(item)}>\n                {renderTemplate(item)}\n              </li>\n            )\n          })}\n        </ul>\n      </Transition>\n    )\n  }\n  return (\n    <div className=\"leod-auto-complete\" ref={componentRef}>\n      <Input\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        {...restProps}\n      />\n      {generateDropdown()}\n    </div>\n  )\n}\n\nexport default AutoComplete;\n\ntry {\n    // @ts-ignore\n    AutoComplete.displayName = \"AutoComplete\";\n    // @ts-ignore\n    AutoComplete.__docgenInfo = { \"description\": \"\", \"displayName\": \"AutoComplete\", \"props\": { \"fetchSuggestions\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fetchSuggestions\", \"required\": true, \"type\": { \"name\": \"(str: string) => DataSourceObject[] | Promise<DataSourceObject[]>\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObject) => void\" } }, \"renderOption\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"renderOption\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObject) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/AutoComplete/autoComplete.tsx#AutoComplete\"] = { docgenInfo: AutoComplete.__docgenInfo, name: \"AutoComplete\", path: \"src/components/AutoComplete/autoComplete.tsx#AutoComplete\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    autoComplete.displayName = \"autoComplete\";\n    // @ts-ignore\n    autoComplete.__docgenInfo = { \"description\": \"\", \"displayName\": \"autoComplete\", \"props\": { \"fetchSuggestions\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fetchSuggestions\", \"required\": true, \"type\": { \"name\": \"(str: string) => DataSourceObject[] | Promise<DataSourceObject[]>\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObject) => void\" } }, \"renderOption\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"renderOption\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObject) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/AutoComplete/autoComplete.tsx#autoComplete\"] = { docgenInfo: autoComplete.__docgenInfo, name: \"autoComplete\", path: \"src/components/AutoComplete/autoComplete.tsx#autoComplete\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}