{"ast":null,"code":"import _objectWithoutProperties from \"/Users/hail/Documents/project/leod/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hail/Documents/project/leod/src/components/autoComplete/autoComplete.tsx\";\nimport React, { useState } from 'react';\nimport Input from '../Input/input';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Icon from '../Icon';\nexport const AutoComplete = props => {\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"fetchSuggestions\", \"onSelect\", \"value\", \"renderOption\"]);\n\n  const [inputValue, setInputValue] = useState(value);\n  const [loading, setLoading] = useState(false);\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n\n    if (value) {\n      const reuslt = fetchSuggestions(value);\n\n      if (reuslt instanceof Promise) {\n        setLoading(true);\n        reuslt.then(data => {\n          setLoading(false);\n          setSuggestions(data);\n        });\n      } else {\n        setSuggestions(reuslt);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleSeletct = item => {\n    setInputValue(item.value);\n    setSuggestions([]);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n  };\n\n  const renderTemplete = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  const generateDropDown = () => {\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }\n    }, suggestions.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      onClick: () => handleSeletct(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, renderTemplete(item))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"leod-auto-complete\"\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    value: inputValue,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: \"abacus\",\n    size: \"lg\",\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"suggstions-loading-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: \"spinner\",\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  })), setSuggestions.length > 0 && generateDropDown());\n};\nAutoComplete.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AutoComplete\"\n};\nexport default AutoComplete;\n\ntry {\n  // @ts-ignore\n  AutoComplete.displayName = \"AutoComplete\"; // @ts-ignore\n\n  AutoComplete.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"AutoComplete\",\n    \"props\": {\n      \"fetchSuggestions\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"fetchSuggestions\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(str: string) => DataSourceObj[] | Promise<DataSourceObj[]>\"\n        }\n      },\n      \"onSelect\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSelect\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObj) => void\"\n        }\n      },\n      \"renderOption\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"renderOption\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObj) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/autoComplete/autoComplete.tsx#AutoComplete\"] = {\n      docgenInfo: AutoComplete.__docgenInfo,\n      name: \"AutoComplete\",\n      path: \"src/components/autoComplete/autoComplete.tsx#AutoComplete\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\ntry {\n  // @ts-ignore\n  autoComplete.displayName = \"autoComplete\"; // @ts-ignore\n\n  autoComplete.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"autoComplete\",\n    \"props\": {\n      \"fetchSuggestions\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"fetchSuggestions\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(str: string) => DataSourceObj[] | Promise<DataSourceObj[]>\"\n        }\n      },\n      \"onSelect\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onSelect\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObj) => void\"\n        }\n      },\n      \"renderOption\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"renderOption\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(item: DataSourceObj) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/components/autoComplete/autoComplete.tsx#autoComplete\"] = {\n      docgenInfo: autoComplete.__docgenInfo,\n      name: \"autoComplete\",\n      path: \"src/components/autoComplete/autoComplete.tsx#autoComplete\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/autoComplete/autoComplete.tsx\"] = {\n    name: \"AutoComplete\",\n    docgenInfo: AutoComplete.__docgenInfo,\n    path: \"src/components/autoComplete/autoComplete.tsx\"\n  };\n}","map":{"version":3,"sources":["/Users/hail/Documents/project/leod/src/components/autoComplete/autoComplete.tsx"],"names":["AutoComplete","props","restProps","useState","handleChange","e","value","setInputValue","reuslt","fetchSuggestions","setLoading","data","setSuggestions","handleSeletct","item","onSelect","renderTemplete","renderOption","generateDropDown","suggestions","loading","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","autoComplete"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, FC, useState, ReactElement } from 'react'\nimport Input, { InputProps } from '../Input/input'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classNames from 'classnames';\nimport Icon from '../Icon';\ninterface DataSourceObj {\n  value: string\n}\nexport type DataSourceType<T = {}> = T & DataSourceObj\ninterface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n  fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>,\n  onSelect?: (item: DataSourceType) => void,\n  renderOption?: (item: DataSourceType) => ReactElement\n}\n\nexport const AutoComplete: FC<AutoCompleteProps> = (props) => {\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props\n  const [inputValue, setInputValue] = useState(value)\n  const [loading, setLoading] = useState(false)\n  const [suggestions, setSuggestions] = useState<DataSourceType[]>([])\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim()\n    setInputValue(value)\n    if (value) {\n      const reuslt = fetchSuggestions(value)\n      if (reuslt instanceof Promise) {\n        setLoading(true)\n        reuslt.then(data => {\n          setLoading(false)\n          setSuggestions(data)\n        })\n      } else {\n        setSuggestions(reuslt)\n      }\n    } else {\n      setSuggestions([])\n    }\n  }\n  const handleSeletct = (item: DataSourceType) => {\n    setInputValue(item.value)\n    setSuggestions([])\n    if (onSelect) {\n      onSelect(item)\n    }\n  }\n  const renderTemplete = (item: DataSourceType) => {\n    return renderOption ? renderOption(item) : item.value\n  }\n\n  const generateDropDown = () => {\n    return < ul >\n      {\n        suggestions.map((item, index) =>\n          <li key={index} onClick={() => handleSeletct(item)}>\n            {renderTemplete(item)}\n          </li>)\n      }\n    </ul >\n  }\n  return <div className=\"leod-auto-complete\" {...restProps}>\n    <Input value={inputValue} onChange={handleChange}></Input>\n    <FontAwesomeIcon icon=\"abacus\" size=\"lg\" spin />\n    {\n      loading &&\n      <div className=\"suggstions-loading-icon\">\n        <Icon icon=\"spinner\" spin />\n      </div>\n    }\n    {setSuggestions.length > 0 && generateDropDown()}\n  </div>\n}\nexport default AutoComplete;try {\n    // @ts-ignore\n    AutoComplete.displayName = \"AutoComplete\";\n    // @ts-ignore\n    AutoComplete.__docgenInfo = { \"description\": \"\", \"displayName\": \"AutoComplete\", \"props\": { \"fetchSuggestions\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fetchSuggestions\", \"required\": true, \"type\": { \"name\": \"(str: string) => DataSourceObj[] | Promise<DataSourceObj[]>\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObj) => void\" } }, \"renderOption\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"renderOption\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObj) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/autoComplete/autoComplete.tsx#AutoComplete\"] = { docgenInfo: AutoComplete.__docgenInfo, name: \"AutoComplete\", path: \"src/components/autoComplete/autoComplete.tsx#AutoComplete\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    autoComplete.displayName = \"autoComplete\";\n    // @ts-ignore\n    autoComplete.__docgenInfo = { \"description\": \"\", \"displayName\": \"autoComplete\", \"props\": { \"fetchSuggestions\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fetchSuggestions\", \"required\": true, \"type\": { \"name\": \"(str: string) => DataSourceObj[] | Promise<DataSourceObj[]>\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObj) => void\" } }, \"renderOption\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"renderOption\", \"required\": false, \"type\": { \"name\": \"(item: DataSourceObj) => ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/autoComplete/autoComplete.tsx#autoComplete\"] = { docgenInfo: autoComplete.__docgenInfo, name: \"autoComplete\", path: \"src/components/autoComplete/autoComplete.tsx#autoComplete\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]},"metadata":{},"sourceType":"module"}